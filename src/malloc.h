
/**
 * @file   src/malloc.h
 * @author Dionysios Diamantopoulos(diamantd@microlab.ntua.gr)
 * @date   December 2013
 *
 * @brief  Memluv free-related functions prototypes.
 */

#ifndef _MALLOC_H_
#define _MALLOC_H_

/** The MemluvFit() function returns the position in freelist of CurMemLuvCore in which a continous 
 *  space of nbytes was found. It selects a fit algorithm based on MEMLUV_FIT_ALGORITHM.
 * @param CurMemLuvCore The employed MemLuvCore on which allocation occurs.
 * @param nbytes        The requested size of bytes to allocate.
 * @retval pos          The position in freelist of CurMemLuvCore in which a continous space of 
 *                      nbytes was found.
 */
uint_t MemluvFit(MemLuvCore *CurMemLuvCore, uint_t nbytes);

/** The MemluvFirstFit() function returns the position in freelist of CurMemLuvCore in which a 
 *  continous space of nbytes was found. It implements a sipmle first fit algorithm, strarting 
 *  search from bin position 0 to the end of freelist. If no empty space is found a zero position 
 *  is retuned and MALLOC_FAIL is assigned to action_status of the employed MemLuvCore. If no 
 *  debugging is enabled (HW_DEBUG_MEMLUV=1), the allocater returns 0, and silently data may be 
 *  overwritted, strating from position 0x0.
 * @param CurMemLuvCore The employed MemLuvCore on which allocation occurs.
 * @param nbytes        The requested size of bytes to allocate.
 * @retval pos          The position in freelist of CurMemLuvCore in which a continous space of 
 *                      nbytes was found.
 */
uint_t MemluvFirstFit(MemLuvCore *CurMemLuvCore, uint_t nbytes);


/** The MemluvAllocUpdateStas() function upon succesfull allocation, updates accordingly the values 
 *  of total_bytes_requested, used_percentage, total_addresses_allocated, total_bytes_for_headers 
 *  and total_fragmented_bytes for the employed MemLuvCore. 
 *  The function updates these values using the bytes to allocate (nbytes) and internal info of the 
 *  employed HW heap.
 * @param CurMemLuvCore The employed HW heap structure MemLuvCore.
 * @param nbytes        The bytes requested for allocation by current call.
 * @param allocated     The bytes succesfully allocated by current call.
 * @retval void	        No returned value.
 */
void MemluvAllocUpdateStas(
#if HW_DEBUG_MEMLUV==1
                            MemLuvCore *CurMemLuvCore, uint_t nbytes, uint_t allocated
#else
                            void
#endif
                          );

/** Tries to allocate memory from a specific free-list organized raw block.
 * @param CurMemLuvCore The pointer of the employed MemLuvCore.
 * @param nbytes        The requested size in bytes.
 * @retval void_pointer The address of the returned memory space.
 */
void* CurMemluvAlloc(MemLuvCore *CurMemLuvCore, uint_t nbytes);

/** The MemluvAlloc() function allocates the memory space  of nbytes and returns the address to 
 *  pointer ptr. This function is just a wrapper which calls CurMemluvAlloc for a specific HW heap. 
 *  The source of this function is automatically generated by GenMemluvWrappers().
 * @param CurMemLuvCore The employed MemLuvCore on which allocation occurs.
 * @param nbytes        The requested size of bytes to allocate.
 * @retval void*        A void pointer which shows the first address of allocated space. 
 *                      The pointer is casted from *CORE_UINT_T to generic *void.
 */
void* MemluvAlloc(uint_t nbytes, uint_t heap_id);

void* MemluvMemcpyBytes(void* destination, void* source, uint_t bytes);
void* MemluvMemcpyWords(void* destination, void* source, uint_t words);

#endif

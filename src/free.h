
/**
 * @file   src/free.h
 * @author Dionysios Diamantopoulos(diamantd@microlab.ntua.gr)
 * @date   December 2013
 *
 * @brief  Memluv free-related functions prototypes.
 */

#ifndef _FREE_H_
#define _FREE_H_

/** The MemluvCalcPtrDistanceFromBase() function returns the position index in freelist which 
 *  corresponds to address pointed by ptr. This function recursively compares the ptr with core[i++]
 *  in order to find index. Thus many cycles are lost here. The usage of header file which stores 
 *  index in metadata (in MemluvAlloc() so that this function is useless in MemluvFree()) is 
 *  recommended (see MEMLUV_ALLOC_HEADER in memluv.h).
 * @param CurMemLuvCore The employed HW heap structure MemLuvCore.
 * @param ptr           The pointer to find the index in freelist.
 * @retval index        The index in freelist which corresponds to address pointed by ptr.
 */
uint_t MemluvCalcPtrDistanceFromBase(MemLuvCore *CurMemLuvCore, CORE_UINT_T *ptr);

/** The MemluvFreeUpdateStas() function upon succesfull free, updates accordingly the values of 
 *  total_bytes_requested, used_percentage, total_addresses_allocated, total_bytes_for_headers and
 *  total_fragmented_bytes for the employed MemLuvCore. 
 *  The function updates these values using the bytes to free (nbytes) and internal info of the 
 *  employed HW heap.
 * @param CurMemLuvCore The employed HW heap structure MemLuvCore.
 * @param nbytes        The bytes to free on current MemluvFree() request.
 * @retval void         No returned value.
 */
void MemluvFreeUpdateStas(MemLuvCore *CurMemLuvCore, uint_t nbytes);

/** The CurMemluvFreeBody() function is the main body of CurMemluvFree.
 *  It is kept in separated function in order to avoid useless inlining option in the body function 
 *  (thus extra resources), which is a mandatory directive as of Vivado 2014.1 in processing 
 *  pointers substraction, needed to calculate langth and index stored in header. 
 * @param CurMemLuvCore         The employed HW heap structure MemLuvCore.
 * @param ptr                   The pointer to free.
 * @param data_alloc_length     The requested size of bytes to free starting from ptr position. 
 *                              It is equal to nbytes when no header is used and user passes this 
 *                              value to MemluvFree() on userspace.
 * @param index                 The index position of ptr in freelist.
 * @retval void                 No returned value.
 */
void CurMemluvFreeBody(MemLuvCore *CurMemLuvCore, CORE_UINT_T *ptr, uint_t data_alloc_length, 
                       uint_t index);

/** The CurMemluvFree() function frees the memory space pointed to by ptr, in the HW heap 
 *  CurMemLuvCore).
 * @param CurMemLuvCore The employed HW heap structure MemLuvCore.
 * @param ptr           The pointer to free.
 * @param nbytes        The requested size of bytes to free starting from ptr position.
 * @retval void         No returned value.
 */
void CurMemluvFree(MemLuvCore *CurMemLuvCore, CORE_UINT_T *ptr, uint_t nbytes );

/** The MemluvFree() function frees the memory space pointed to by ptr, which must have been 
 *  returned by a previous call to CurMemluvAlloc(). This function is just a wrapper which calls 
 *  CurMemluvFree for a specific HW heap. The source of this function is automatically generated by 
 *  GenMemluvWrappers().
 * @param ptr           The pointer to free.
 * @param nbytes        The requested size of bytes to free starting from ptr position.
 * @retval void         No returned value.
 */
void MemluvFree(CORE_UINT_T *ptr, uint_t nbytes, uint_t heap_id );

#endif